{"version":3,"sources":["DarkToggle/DarkToggle.jsx","Home/Home.jsx","useChat.js","ChatRoom/ChatRoom.jsx","App.js","serviceWorker.js","index.js"],"names":["DarkToggle","theme","useMediaQuery","query","undefined","prefersDark","setIsDark","localStorage","getItem","useState","isDark","useEffect","setItem","document","documentElement","classList","add","remove","className","type","onClick","title","size","color","Home","React","roomName","setRoomName","isDesktopOrLaptop","isTabletOrMobile","placeholder","value","onChange","event","target","to","navigator","clipboard","writeText","window","location","href","style","verticalAlign","useChat","roomId","messages","setMessages","socketRef","useRef","current","socketIOClient","on","message","incomingMessage","ownedByCurrentUser","senderId","id","disconnect","sendMessage","messageBody","emit","body","ChatRoom","props","match","params","newMessage","setNewMessage","map","i","key","App","basename","exact","path","component","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a4077cf2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport './DarkToggle.css';\nimport { FaRegMoon } from 'react-icons/fa';\nimport { MdWbSunny } from 'react-icons/md';\n\nconst DARK_CLASS = 'dark';\n\nexport const DarkToggle = () => {\n  const systemPrefersDark = useMediaQuery(\n    {\n      query: '(prefers-color-scheme: dark)',\n    },\n    undefined,\n    (prefersDark) => {\n      setIsDark(prefersDark);\n    }\n  );\n  const getThemePref = localStorage.getItem('isDark');\n  let theme;\n  if (getThemePref === 'true') {\n    theme = true;\n  } else {\n    theme = false;\n  }\n  const [isDark, setIsDark] = useState(theme);\n\n  useEffect(() => {\n    localStorage.setItem('isDark', isDark);\n    if (isDark === true) {\n      document.documentElement.classList.add(DARK_CLASS);\n    } else {\n      document.documentElement.classList.remove(DARK_CLASS);\n    }\n  }, [isDark]);\n\n  const handleDarkMode = () => {\n    setIsDark(!isDark);\n  };\n\n  return (\n    <button\n      className=\"dark-mode-button\"\n      type=\"button\"\n      onClick={() => handleDarkMode()}\n      title={isDark ? 'Light Mode' : 'Dark Mode'}\n    >\n      {isDark ? (\n        <MdWbSunny size={35} color={'white'} />\n      ) : (\n        <FaRegMoon size={30} />\n      )}\n    </button>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { DarkToggle } from '../DarkToggle/DarkToggle';\nimport { BsClipboard } from 'react-icons/bs';\nimport { useMediaQuery } from 'react-responsive';\nimport './Home.css';\n\nconst Home = () => {\n  const [roomName, setRoomName] = React.useState('');\n  const isDesktopOrLaptop = useMediaQuery({\n    query: '(min-device-width: 1224px)',\n  });\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1224px)' });\n  const handleRoomNameChange = (event) => {\n    setRoomName(event.target.value);\n  };\n  const handleShare = () => {\n    navigator.clipboard.writeText(window.location.href);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"home-container\">\n        {isTabletOrMobile && (\n          <div className=\"toggle-button-mobile\">\n            <DarkToggle />\n          </div>\n        )}\n        <div className=\"title\">Chat Room!</div>\n        {isDesktopOrLaptop && (\n          <div className=\"toggle-button\">\n            <DarkToggle />\n          </div>\n        )}\n        <code className=\"text-input-field\">Create or Join a room</code>\n        <input\n          type=\"text\"\n          placeholder=\"Room\"\n          value={roomName}\n          onChange={handleRoomNameChange}\n          className=\"text-input-field\"\n        />\n        <Link to={`/${roomName}`} className=\"enter-room-button\">\n          Join room\n        </Link>\n        <div className=\"share-text\">\n          Share the link with others to start chatting. Click{' '}\n          <button className=\"this\" onClick={() => handleShare()}>\n            <BsClipboard size={15} style={{ verticalAlign: 'top' }} />\n          </button>{' '}\n          to copy.\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst NEW_CHAT_MESSAGE_EVENT = 'newChatMessage'; // Name of the event\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]); // Sent and received messages\n  const socketRef = useRef();\n\n  useEffect(() => {\n    // Creates a WebSocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId },\n    });\n\n    // Listens for incoming messages\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    // Destroys the socket reference\n    // when the connection is closed\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  // Sends a message to the server that\n  // forwards it to all users in the same room\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useChat;\n","import React from 'react';\n\nimport './ChatRoom.css';\nimport useChat from '../useChat';\nimport { DarkToggle } from '../DarkToggle/DarkToggle';\n\nconst ChatRoom = (props) => {\n  const { roomId } = props.match.params; // Gets roomId from URL\n  const { messages, sendMessage } = useChat(roomId); // Creates a websocket and manages messaging\n  const [newMessage, setNewMessage] = React.useState(''); // Message to be sent\n\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage);\n    setNewMessage('');\n  };\n\n  return (\n    <div className=\"parent\">\n      <div className=\"chat-room-container\">\n        <div className=\"toggle-button\">\n          <DarkToggle />\n        </div>\n        <h1 className=\"room-name\">Room: {roomId}</h1>\n        <div className=\"messages-container\">\n          <ol className=\"messages-list\">\n            {messages.map((message, i) => (\n              <li\n                key={i}\n                className={`message-item ${\n                  message.ownedByCurrentUser ? 'my-message' : 'received-message'\n                }`}\n              >\n                {message.body}\n              </li>\n            ))}\n          </ol>\n        </div>\n        <textarea\n          value={newMessage}\n          onChange={handleNewMessageChange}\n          placeholder=\"Write message...\"\n          className=\"new-message-input-field\"\n        />\n        <button onClick={handleSendMessage} className=\"send-message-button\">\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatRoom;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './Home/Home';\nimport ChatRoom from './ChatRoom/ChatRoom';\nimport './Theme/theme.css';\n\nfunction App() {\n  return (\n    <Router basename=\"/chat-room\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/:roomId\" component={ChatRoom} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}